import asyncHandler from 'express-async-handler';
import { prisma } from '../prisma.js';

// @desc    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
// @route   GET /api/bids
// @access  Private

export const getBids = asyncHandler(async (req, res) => {
  try {
    const { range, sort, filter } = req.query;

    // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–±–æ—Ä JSON (–µ—Å–ª–∏ undefined, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    const rangeParsed = range ? JSON.parse(range) : [0, 9];
    const sortParsed = sort ? JSON.parse(sort) : ['createdAt', 'desc'];
    const filterParsed = filter ? JSON.parse(filter) : {};

    const rangeStart = rangeParsed[0];
    const rangeEnd = rangeParsed[1];

    const sortField = sortParsed[0];
    const sortOrder = sortParsed[1].toLowerCase();

    // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const where = Object.keys(filterParsed).reduce((acc, field) => {
      const value = filterParsed[field];
      if (Array.isArray(value)) {
        acc[field] = { in: value };
      } else if (typeof value === 'string') {
        acc[field] = { contains: value, mode: 'insensitive' };
      } else {
        acc[field] = { equals: value };
      }
      return acc;
    }, {});

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `prisma.bid` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!prisma.bid) {
      throw new Error('–û—à–∏–±–∫–∞ Prisma: –ú–æ–¥–µ–ª—å `bid` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ where –Ω–µ undefined
    if (typeof where !== 'object') {
      throw new Error('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤.');
    }

    // üìå –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const totalBids = await prisma.bid.count({ where });

    // üìå –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const bids = await prisma.bid.findMany({
      where,
      skip: rangeStart,
      take: Math.min(rangeEnd - rangeStart + 1, totalBids),
      orderBy: { [sortField]: sortOrder },
    });

    // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
    res.set(
      'Content-Range',
      `bids ${rangeStart}-${Math.min(rangeEnd, totalBids - 1)}/${totalBids}`
    );

    res.json(bids);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
  }
});

// @desc    –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞—è–≤–∫—É –ø–æ ID
// @route   GET /api/bids/:id
// @access  Private
export const getBidById = asyncHandler(async (req, res) => {
  const { id } = req.params;

  const bid = await prisma.bid.findUnique({
    where: { id: parseInt(id, 10) },
  });

  if (!bid) {
    res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!' });
    return;
  }

  res.json(bid);
});

// @desc    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
// @route   POST /api/bids
// @access  Private
export const createBid = asyncHandler(async (req, res) => {
  const { name, phone, email, form, inn, comment } = req.body;

  if (!name || !phone || !email || !form || !inn) {
    res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è (–∫—Ä–æ–º–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    return;
  }

  const bid = await prisma.bid.create({
    data: {
      name,
      phone,
      email,
      form,
      inn,
      comment,
    },
  });

  res.status(201).json(bid);
});

// @desc    –û–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É
// @route   PUT /api/bids/:id
// @access  Private
export const updateBid = asyncHandler(async (req, res) => {
  const { id } = req.params;
  const { name, phone, email, form, inn, comment } = req.body;

  try {
    const existingBid = await prisma.bid.findUnique({
      where: { id: parseInt(id, 10) },
    });

    if (!existingBid) {
      res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!' });
      return;
    }

    const updatedBid = await prisma.bid.update({
      where: { id: parseInt(id, 10) },
      data: {
        name: name ?? existingBid.name,
        phone: phone ?? existingBid.phone,
        email: email ?? existingBid.email,
        form: form ?? existingBid.form,
        inn: inn ?? existingBid.inn,
        comment: comment ?? existingBid.comment,
      },
    });

    res.json(updatedBid);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏' });
  }
});

// @desc    –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É
// @route   DELETE /api/bids/:id
// @access  Private
export const deleteBid = asyncHandler(async (req, res) => {
  const { id } = req.params;

  try {
    await prisma.bid.delete({
      where: { id: parseInt(id, 10) },
    });

    res.json({ message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
    res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!' });
  }
});
