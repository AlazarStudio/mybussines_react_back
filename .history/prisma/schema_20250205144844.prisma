// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  login    String @unique
  name     String
  password String
}

model News {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  date        DateTime
  img         String[]
}

model Form {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title     String
  service   Service? @relation(fields: [serviceId], references: [id]) // Связь Form → Service (1:M)
  serviceId Int? // Внешний ключ
}

model Center {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title     String
  service   Service? @relation(fields: [serviceId], references: [id]) // Связь Center → Service (1:M)
  serviceId Int? // Внешний ключ
}

model Service {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  img         String[]

  forms   Form[] // Связь Service → Form (1:M)
  centers Center[] // Связь Service → Center (1:M)
}

model Banner {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  img String[]
}

model Video {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  url   String
  date  DateTime
  img   String[]
}

model Map {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  ip    String
  ul    String
  all   String
}

model TypeSupport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title    String
  supports Support[] // Один тип поддержки может быть у нескольких записей в Support
}

model TagsSupport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title     String
  supports  SupportTags[]
  Support   Support?      @relation(fields: [supportId], references: [id])
  supportId Int?
}

model Support {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  popular     Boolean
  img         String[]

  typeSupportId Int
  typeSupport   TypeSupport @relation(fields: [typeSupportId], references: [id]) // Связь один ко многим

  SupportTags SupportTags[]
  TagsSupport TagsSupport[]
}

model SupportTags {
  supportId Int
  tagId     Int

  support Support     @relation(fields: [supportId], references: [id], onDelete: Cascade)
  tag     TagsSupport @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([supportId, tagId]) // Составной первичный ключ
}

model base {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  date        DateTime
  img         String[]
}

model showCase {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  date        DateTime
  img         String[]
}
